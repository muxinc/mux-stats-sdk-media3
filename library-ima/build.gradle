plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
  id 'com.mux.gradle.android.mux-android-distribution'
}

android {
  namespace 'com.mux.stats.sdk.media3_ima'
  compileSdk 33

  defaultConfig {
    minSdk 16
    targetSdk 33

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles "consumer-rules.pro"
  }

  flavorDimensions = ["media3"]
  productFlavors {
    // This module does not currently need different src sets for different media3 versions.
    // We still need to declare different flavors so we can create version-specific variants
    at_1_0 { dimension "media3" }
    at_1_1 { dimension "media3" }
    latest { dimension "media3" }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
}

muxDistribution {
  println(">>>muxDistribution")
  devVersion versionFromCommitHash('dev-')
  releaseVersion versionFromTag()
  artifactIds { variant ->
    def media3Variant = variant.productFlavors.find { it.dimension == "media3" }.name
    if (media3Variant.containsIgnoreCase("latest")) {
      return "data-media3-ima"
    } else {
      return "data-media3-ima-$media3Variant"
    }
  }
  groupIds just("com.mux.stats.sdk.muxstats")
  publicReleaseIf releaseOnTag()

  // TODO: This is kinda clumsy, packageJavadocs should be a function not a property probably
  packageJavadocs = releaseOnTag().call()
  publishIf { it.containsIgnoreCase("release") }
  artifactoryConfig {
    contextUrl = "https://muxinc.jfrog.io/artifactory/"
    releaseRepoKey = 'default-maven-release-local'
    devRepoKey = 'default-maven-local'
  }

  dokkaConfig {
    moduleName = "Mux Data SDK for Media3, IMA with ExoPlayer"
    footer = "(c) " + new Date().format("yyyy") + " Mux, Inc. Have questions or need help?" +
            " Contact support@mux.com"
  }

  pom {
    description "The Mux Data SDK for Google's androidX media3 player"
    inceptionYear = "2022"
    url = "https://github.com/muxinc/mux-stats-sdk-media3"
    organization {
      name = "Mux, Inc"
      url = "https://www.mux.com"
    }
    developers {
      developer {
        email = "support@mux.com"
        name = "The player and sdks team @mux"
        organization = "Mux, inc"
      }
    }
  }
}

dependencies {
  debugImplementation project(':library')
  
  // note- 3.30.0 and 3.30.1 are marked as broken by google, so don't use
  api 'com.google.ads.interactivemedia.v3:interactivemedia:3.29.0'
  // implementation is used so it doesn't pollute customers namespace
  implementation "com.mux:utils-kt:$coreVersion"

  //noinspection GradleDependency
  at_1_0Api "androidx.media3:media3-exoplayer-ima:1.0.0"
  at_1_1Api "androidx.media3:media3-exoplayer-ima:1.1.0"
  latestApi "androidx.media3:media3-exoplayer-ima:1.1.0"

  implementation 'androidx.core:core-ktx:1.10.1'
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'com.google.android.material:material:1.9.0'
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

afterEvaluate {
  // Release builds need mvn coordinates to depend on modules from this project
  //  We only want to add this to release builds, and it has to be the same variant to work.
  //  There's 'at_1_1Api '..' and releaseApi '..', but no at_1_1ReleaseApi '..'
  android.libraryVariants.findAll { it.buildType.name.contains("release") }
          .each { variant ->
            def suffix = variant.productFlavors.get(0).name
            if (suffix.containsIgnoreCase("latest")) {
              suffix = "" // 'latest' variant has no -at_X_X
            } else {
              suffix = "-$suffix"
            }
            def depNotation =
                    "com.mux.stats.sdk.muxstats:data-media3-custom${suffix}:${project.version}"
            def sourceSet = variant.sourceSets.reverse()[0] // Last src set is most specific
            project.dependencies.add(sourceSet.apiConfigurationName, depNotation)
          }
}
